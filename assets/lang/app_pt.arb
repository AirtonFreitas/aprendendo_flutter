{
  "titleApp": "Aprender Flutter",
  "titleDart": "Linguagem Dart",
  "syntaxTitle": "Sintaxe",
  "nameDart": "Dart",
  "nameFlutter": "Flutter",
  "nameWidgets": "Widgets",
  "nameManagementState": "Gerência de Estado",
  "nameMultiplatform": "Multiplataforma",
  "whatFlutter": "O que é o Flutter?",
  "whatDart": "O que é o Dart?",
  "whatWidgets": "O que são os Widgets?",
  "whatState": "O que é gerência de estado?",
  "whatMultiplatform": "O que é ser multiplataforma?",
  "learn": "Como aprender mais?",
  "learnApps": "Aprenda mais com nossos apps",
  "learnSqlTitle": "Aprendendo SQL",
  "flutterDescription": "O Flutter é um dos principais frameworks para o desenvolvimento de aplicações mobile.",
  "flutterDescriptionTwo": "Criado pela Google, com o Flutter conseguimos desenvolver aplicações nativas para Android e iOS a partir de um único código base.",
  "whatsflutterLanguage": "Qual linguagem o flutter usa?",
  "flutterLanguage": "O Flutter utiliza uma linguagem também criado pelo próprio Google, chamada Dart.",
  "dartDescript": " é uma linguagem de programação independente de qualquer plataforma. Linguagem de código aberto e orientada a objetos que compreende uma variedade de recursos úteis para um desenvolvedor de software.",
  "flutterDescript": " é um kit de ferramentas de interface de usuário portátil completo com ferramentas e widgets. Ele fornece aos desenvolvedores uma plataforma para construir e implementar aplicativos compilados nativamente e visualmente atraentes para várias plataformas com facilidade.",
  "whatLearn": "O que vou aprender nesse app?",
  "detail": "Detalhando um pouco...",
  "managementStateDescription": "A gerencia de estado é basicamente a forma que usamos para notificar o flutter quando ele precisa redesenhar um componente da tela, e como o flutter vai fazer isso de forma performática.\n\nPara fazer essa gerência, nós podemos usar algumas bibliotecas que vão nos auxiliar nessa tarefa.\nEm nosso exemplo usaremos o MOBX.",
  "managementStateElements": "Nós temos 3 principais elementos envolvidos nessa gerência. \nTemos as Reactions, que basicamente é redesenhar na tela a informação. \nTemos os Observables, que são as variáveis observadas pelo flutter. O flutter vai olhar pra essa Observable e reescrever na tela, caso haja alteração na Observable. \nE temos as Actions, que são responsáveis por alterar os Observables.",
  "managementStateExample": "No nosso exemplo, o flutter está desenhando ali na tela o saldo da conta do usuário. \nNo momento o saldo é de R$632,00",
  "managementStateExampleTwo": "Depois que o flutter desenhou a tela, o usuário recebeu uma transferencia de R$50,00. \nA variável foi alterada, mas o flutter não exibiu ainda o novo saldo.",
  "balance": "saldo",
  "functionDescription": "Essa é a função que irá receber o novo saldo.",
  "receivedDeposit": "recebeDeposito",
  "valueDeposit": " valor depositado ",
  "valueInput": "Entrada do novo saldo de R$50,00",
  "newBalance": "Neste momento o novo saldo é de R$682.00",
  "managementStateErro": "Mas a nossa tela não foi redesenhada. Ela continua mostrando o valor de R$632,00. \nEntão essa é a função da gerência do estado.",
  "exampleMobx": "Vamos ver como fica com Mobx?",
  "mobxDescription": "Então agora o saldo é um valor OBSERVABLE, ou seja, que pode ser observado por alguém.\n\n\nAgora o responsável por alterar o valor desse valor observável é a nossa ACTION.",
  "mobxDescriptionTwo": "E agora o nosso flutter, que está dentro de um OBSERVER, agora é um observador. Ele fica olhando para o OBBSERVABLE.\nQuando houver uma alteração, ele irá redesenhar o widget e mostrar o novo valor.",
  "managementStateConclude": "De forma resumida, essa é a função da Gerência de Estado.",
  "introduction": "Para as informações abaixo, estou considerando que você já sabe como funciona um algoritmo e já  tem conhecimento em lógica de programação.",
  "dartDescription": "O Dart é uma linguagem de programação fortemente tipada inicialmente criada pela Google em 2011. A missão inicial do Dart era substituir o JavaScript para desenvolvimento de scripts em páginas web.",
  "dartEvolution": "Porém, com a evolução da linguagem e com o passar dos anos, ela hoje pode ser considerada uma linguagem multi-paradigma, embora a linguagem apresente fortes estruturas típicas de linguagens orientadas a objeto. \nVou mostrar um pouco da sintaxe do dart.",
  "firstSee": "Primeiro vamos ver como seria um simples 'Hello World' em dart.",
  "variables": "Variáveis",
  "variablesCreate": "Você pode criar uma variável sem declarar exatamente o tipo da variável. Mas o tipo da variável é inferido no momento em que você declarar um valor para a variável.",
  "variableDynamic": "Então o tipo 'var' fica como dynamic caso não seja definido um valor para a variável. Após a definição de algum valor para variável ela tem o tipo inferido. E após isso não temos como alterar o tipo da variável.",
  "variableCreateType": "E você pode também criar a variável declarando o formato diretamente:",
  "rememberingVariable": "Lembrando que não é possível alterar o formato da variável.",
  "variablesConst": "Variáveis Constantes",
  "variablesConstCreate": "Para declarar uma variável constante, basta ao invés de 'var', usar a palavra 'final'.",
  "ifAndElseTitle": "If e Else",
  "ifAndElseExample": "Para o exemplo abaixo, se o saldo for maior ou igual ao valorSaque, ele permitirá realizar o saque. Senão o sistema não fará o saque.",
  "ifAndElseConditions": "Entre os parênteses temos a condição do IF, caso atenda as condições o código dentro das chaves será executado. Caso não atenda as condições, será executado o código dentro das chaves do ELSE.",
  "forTitle": "For",
  "forExample": "Para o exemplo do laço de repetição FOR, faremos uma contagem dos números até alcançar o número 10.",
  "forDescription": "Conforme sabemos, o laço for consiste em executar uma ação por um número determinado de vezes. E dentro dos parênteses() nós temos 3 parâmetros. ",
  "forVariableControl": "Variável para controle ",
  "forConditions": "Condição para executar",
  "forAnd": " e ",
  "forIncrementVariable": "Incremento da variável",
  "forDescriptionT": ".\nE com isso nós temos nosso ",
  "forCode": "trecho de código ",
  "forRepet": "sendo repetido, quantas vezes precisarmos.",
  "switchTitle": "Switch",
  "switchDescription": "O comando Switch tem a função de executar um determinado código quando atender a uma condição específica. \nE geralmente é usado quando temos várias opções possíveis.",
  "switchState": "Estado",
  "switchMG": "'O Imposto de MG é 18%'",
  "switchAC": "'O Imposto de AC é 17%'",
  "switchAL": "'O Imposto de AL é 12%'",
  "switchRJ": "'O Imposto de RJ é 18%'",
  "switchSC": "'O Imposto de SC é 17%'",
  "switchDefault": "'Venda indisponível para seu estado.'",
  "switchExample": "Por exemplo esse exemplo acima, o Switch está testando qual o ESTADO está sendo informado. \n'Caso seja algum dos exemplos ele irá printar exatamente a aliquota. \nMas caso o estado desconhecido, ele irá entrar na opção DEFAULT e irá exibir a mensagem que a venda está indisponível.",
  "reading": "Continuar lendo...",
  "multplatformIntroduction": "O flutter tem uma grande vantagem sobre outras tecnologias, que é ser multiplataforma. Um desenvolvedor flutter consegue programar para Android, IOS, web e até mesmo para desktop.",
  "multplatformDescription": "Quando comparamos com outros frameworks, o flutter tem uma grande vantagem. \nO custo do Flutter geralmente é menor. \nPois em alguns casos é preciso uma equipe de desenvolvimento IOS e outra equipe de desenvolvimento Android. \nE no caso do flutter não é preciso uma equipe específica para cada plataforma, diminuindo consideravelmente os custos. ",
  "multplatformDescriptionTwo": "Temos diferentes plataformas, diferentes sistemas operacionais e cada um desses sistemas operacionais exige que o desenvolvimento das aplicações seja em uma linguagem específica. \nPor exemplo IOS e Android. Ambos são 'mobile' mas Android usa a linguagem Java e Kotlin, enquando o IOS usa o Swift.",
  "multplatformConclude": "Com o flutter temos a possibilidade de programar apenas uma vez, apenas um código e terá a opção de gerar versões para ambos sistemas operacionais. \nIsso é ser multiplataforma.",
  "learMore": "Você deve estar se perguntando, como posso aprender mais?",
  "channelYoutube": "Existem muitos canais do Youtube que vão ajudar muito você que está começando.",
  "myApps": "Meus apps de ensino",
  "callMe": "Me chame no linkedIn para conversar sobre tecnologia",
  "officialChannels": "Sites oficiais do Flutter e Dart",
  "rateMe": "Avalie o app",
  "like": "O que você achou do app?",
  "widgetsLayoutTitle": "Widgets de Layout",
  "widgetsInterfacetTitle": "Widgets de Interface",
  "widgetsIntroduction": "Os componentes de telas do flutter são feitos com base em um conjunto de Widgets. \nUm widget é um componente visual na interface do dispositivo. ",
  "widgetsCategoryTitle": "Os widgets são divididos em duas categorias",
  "widgetsLayout": "Layout",
  "widgetsInterface": "Interface",
  "widgetsLayoutDescription": "Widgets de Layout são os widgets que organizam a tela. E recebem os widgets de interface.",
  "widgetsInterfaceDescription": "Widgets de interface são os widgets que irão ser exibidos na interface do usuário.",
  "widgetsDescription": "Agora já sabemos como funcionam os widgets e alguns dos exemplos mais comuns.\n\nExistem vários outros widgets que podem ser utilizados e cada um possui suas peculiaridades. A recomendação é sempre buscar aprender mais e em fontes confiáveis.",
  "widgetsScaffoldDescription": "O Scaffold é uma classe em flutter que fornece muitos widgets de interface como Drawer, BottonNavigationBar, FloatingActionButton, AppBar, Body entre outros. \nO Scaffold irá expandir e ocupar toda a tela do dispositivo, ocupando todo o espaço disponível.",
  "widgetsScaffoldDescriptionTwo": "No código exibido acima, temos somente a declaração de algumas propriedades do Scaffold, mas não temos o widgets de interface que será exibido. \nPara que seja exibido os componentes de interface(appBar, drawer, body), precisamos declarar cada widget.\n\nPara criar uma tela semelhante a esta, o código seria este:",
  "widgetScaffoldReceived": "Então o nosso Scaffold irá receber alguns widgets de interface, que serão exibidos, cada um em seu lugar.",
  "widgetContainerIntro": "Um container é um widget que possui propriedades para dimensionamento, arredondamento, cores e espaçamento. \nBasicamente um container é uma 'caixa' para armazenar conteúdo. \nEle recebe outros widgets a partir da propriedade 'child:'.",
  "widgetContentContainer": "texto que será exibido",
  "widgetExample": "Neste exemplo temos um widget com várias propriedades. \nAltura 70, Largura 70, Cor de fundo. E temos dentro deste widget o texto sendo exibido.",
  "widgetColumns": "Outros widgets muito usados para construção de layouts são as Columns e Rows (colunas e linhas). \nEstes widgets em especial, são usados para posicionar os widgets de interface.",
  "widgetColumnsDescription": "As Columns fazem o empilhamento vertical dos widgets, enquanto as Rows fazem o enfileiramento horizontal. \n\nTemos duas propriedades muito importantes para esses widgets que são 'mainAxisAlignment' e 'crossAxisAlignment'.\n\nEssas duas propriedades são responsáveis por organizar todos os componentes dentro do widget.",
  "fisrt": " primeiro ",
  "second": " segundo ",
  "third": " terceiro ",
  "widgetImagesTitle": "Imagens",
  "widgetImagesDescription": "Temos a opção de exibir uma imagem no app flutter diretamente da internet, ou salva dentro de uma pasta local. \nPara exibir uma imagem na tela, usamos esse widget 'Image()'.",
  "widgetImageUrl": "url da imagem",
  "widgetImageLocal": "caminho local da imagem",
  "widgetImageExample": "Como exemplo, vamos pegar uma imagem de um outro aplicativo e exibir aqui em nossa tela.",
  "widgetTextTitle": "Textos",
  "widgetTextDescription": "Para exibir um texto na tela, podemos usar esse widget 'Text()'.",
  "widgetTest": "Teste de um Text",
  "widgetIconsTitle": "Icones",
  "widgetIconsDescription": "O flutter possui vários ícones que podemos usar para criar nossos layouts. \nPara isso podemos usar o widget Icon().",
  "widgetButtonsTitle": "Botões",
  "widgetButtonsDescription": "Temos vários widgets que podem fazer a função de 'captura de toque', ou seja, botões.\nUm exemplo é o TextButton().",
  "widgetButtonSend": "Enviar"
}