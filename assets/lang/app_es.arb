{
  "titleApp": "Aprende Flutter",
  "titleDart": "Lenguaje de dardos",
  "syntaxTitle": "Sintaxis",
  "nameDart": "Dardo",
  "nameFlutter": "Flutter",
  "nameWidgets": "Aparatos",
  "nameManagementState": "Administración de estado",
  "nameMultiplataforma": "Multiplataforma",
  "whatFlutter": "¿Qué es Flutter?",
  "whatDart": "¿Qué es Dart?",
  "whatWidgets": "¿Qué son los widgets?",
  "whatState": "¿Qué es la gestión del estado?",
  "whatMultiplatform": "¿Qué es ser multiplataforma?",
  "learn": "¿Cómo aprender más?",
  "learnApps": "Aprende más con nuestras aplicaciones",
  "learnSqlTitle": "Aprender SQL",
  "flutterDescription": "Flutter es uno de los frameworks líderes para desarrollar aplicaciones móviles.",
  "flutterDescriptionTwo": "Creado por Google, con Flutter podemos desarrollar aplicaciones nativas para Android e iOS desde una única base de código",
  "whatsflutterLanguage": "¿Qué idioma usa flutter?",
  "flutterLanguage": "Flutter usa un lenguaje también creado por el mismo Google, llamado Dart.",
  "dartDescript": " es un lenguaje de programación independiente de la plataforma. Lenguaje de código abierto orientado a objetos que comprende una variedad de características útiles para un desarrollador de software.",
  "flutterDescript": " es un conjunto de herramientas de interfaz de usuario portátil completo con herramientas y widgets. Brinda a los desarrolladores una plataforma para crear e implementar aplicaciones compiladas de forma nativa y visualmente atractivas para múltiples plataformas con facilidad",
  "whatLearn": "¿Qué aprenderé en esta aplicación?",
  "detail": "Un poco más de detalle...",
  "managementStateDescription": "La gestión de estado es básicamente la forma que usamos para notificar a flutter cuando necesita volver a dibujar un componente de pantalla, y cómo flutter lo hará de forma eficaz.\n\nPara hacer esta gestión, podemos usar algunas bibliotecas que nos ayudarán en esta tarea.\nEn nuestro ejemplo usaremos MOBX.",
  "managementStateElements": "Tenemos 3 elementos principales involucrados en esta gestión. \nTenemos las Reacciones, que básicamente es volver a dibujar la información en la pantalla. \nTenemos los Observables, que son las variables observadas por flutter. Flutter observará este Observable y reescribirlo en la pantalla, en caso de que haya un cambio en el Observable. \nY tenemos las Acciones, que se encargan de cambiar los Observables.",
  "managementStateExample": "En nuestro ejemplo, flutter dibuja el saldo de la cuenta del usuario en la pantalla. \nEn este momento el saldo es de R$632,00",
  "managementStateExampleTwo": "Después de que flutter dibujó la pantalla, el usuario recibió una transferencia de BRL 50.00. \nLa variable se cambió, pero flutter aún no mostró el nuevo saldo",
  "balance": "saldo",
  "functionDescription": "Esta es la función que recibirá el nuevo saldo.",
  "receivedDeposit": "receiveDeposit",
  "valueDeposit": "valor depositado",
  "valueInput": "Ingreso del nuevo saldo de BRL 50,00",
  "newBalance": "Ahora mismo el nuevo saldo es de R$682,00",
  "managementStateError": "Pero nuestra pantalla no ha sido redibujada. Sigue mostrando el valor de R$632.00. \nAsí que este es el rol de la administración estatal.",
  "exampleMobx": "¿Veamos cómo se ve con Mobx?",
  "mobxDescription": "Entonces ahora el saldo es un valor OBSERVABLE, es decir, que puede ser observado por alguien.\n\n\nAhora nuestra ACCIÓN se encarga de cambiar el valor de este valor observable.",
  "mobxDescriptionTwo": "Y ahora nuestro flutter, que está dentro de un OBSERVADOR, ahora es un observador. Sigue mirando el OBBSERVABLE.\nCuando hay un cambio, vuelve a dibujar el widget y muestra el nuevo valor",
  "managementStateConclude": "En pocas palabras, esta es la función de la administración estatal",
  "introduction": "Para la siguiente información, asumo que ya sabes cómo funciona un algoritmo y ya tienes conocimientos en lógica de programación.",
  "dartDescription": "Dart es un lenguaje de programación fuertemente tipado creado inicialmente por Google en 2011. La misión inicial de Dart era reemplazar JavaScript para crear secuencias de comandos de páginas web",
  "dartEvolution": "Sin embargo, con la evolución del lenguaje y a lo largo de los años, ahora puede considerarse un lenguaje multiparadigma, aunque el lenguaje tiene estructuras sólidas típicas de los lenguajes orientados a objetos. \nTe mostraré algunas de la sintaxis do dart.",
  "firstSee": "Primero, veamos cómo se vería un simple 'Hello World' en dart",
  "variables": "Variables",
  "variablesCreate": "Puedes crear una variable sin declarar el tipo exacto de la variable. Pero el tipo de la variable se infiere en el momento en que declaras un valor para la variable.",
  "variableDynamic": "Entonces el tipo 'var' se vuelve dinámico si no se define un valor para la variable. Después de definir algún valor para la variable, tiene el tipo inferido. Y después de eso, no podemos cambiar el tipo de la variable. ",
  "variableCreateType": "Y también puedes crear la variable declarando el formato directamente:",
  "rememberingVariable": "Recordando que no es posible cambiar el formato de la variable.",
  "variablesConst": "Variables constantes",
  "variablesConstCreate": "Para declarar una variable constante, solo usa la palabra 'final' en lugar de 'var'.",
  "ifAndElseTitle": "Si y si no",
  "ifAndElseExample": "Para el siguiente ejemplo, si el saldo es mayor o igual al monto del Retiro, permitirá retirar. De lo contrario, el sistema no realizará retiros.",
  "ifAndElseConditions": "Entre paréntesis tenemos la condición IF, si cumple las condiciones se ejecutará el código dentro de las llaves. Si no cumple las condiciones, se ejecutará el código dentro de las llaves ELSE.",
  "forTitle": "Para",
  "forExample": "Para el ejemplo del bucle FOR, contaremos los números hasta llegar al número 10.",
  "forDescription": "Como sabemos, el bucle for consiste en ejecutar una acción un cierto número de veces. Y dentro de los paréntesis() tenemos 3 parámetros. ",
  "forVariableControl": "Variable para control",
  "forConditions": "Condición para ejecutar",
  "forAnd": " y ",
  "forIncrementVariable": "Incremento de variable",
  "forDescriptionT": ".\nY con eso tenemos nuestro ",
  "forCode": "fragmento de código ",
  "forRepet": "repitiendo tantas veces como sea necesario.",
  "switchTitle": "Cambiar",
  "switchDescription": "El comando Cambiar tiene la función de ejecutar un código determinado cuando cumple una condición específica. \nSe suele usar cuando tenemos varias opciones posibles.",
  "switchState": "Estado",
  "switchMG": "'El impuesto de MG es del 18%'",
  "switchAC": "'El impuesto AC es 17%'",
  "switchAL": "'El impuesto AL es del 12%'",
  "switchRJ": "'El impuesto de RJ es del 18%'",
  "switchSC": "'El impuesto SC es 17%'",
  "switchDefault": "'Venta no disponible para su estado'",
  "switchExample": "Por ejemplo, en este ejemplo anterior, el Switch está probando qué ESTADO está siendo informado. \n'Si es uno de los ejemplos, imprimirá exactamente la alícuota. \nPero si el estado es desconocido, lo hará ingrese la opción PREDETERMINADO y mostrará el mensaje de que la venta no está disponible.",
  "reading": "Continuar leyendo...",
  "multplatformIntroduction": "Flutter tiene una gran ventaja sobre otras tecnologías, y es que es multiplataforma. Un desarrollador de flutter puede programar para Android, IOS, web e incluso escritorio",
  "multplatformDescription": "Cuando se compara con otros frameworks, flutter tiene una gran ventaja. \nEl costo de Flutter es generalmente más bajo. \nPorque en algunos casos se necesita un equipo de desarrollo de IOS y otro de Android. \nY en este caso con flutter , no necesitas un equipo específico para cada plataforma, reduciendo costes considerablemente.",
  "multplatformDescriptionTwo": "Tenemos diferentes plataformas, diferentes sistemas operativos y cada uno de estos sistemas operativos requiere que el desarrollo de aplicaciones sea en un lenguaje específico. \nPor ejemplo IOS y Android. Ambos son 'móviles' pero Android usa el lenguaje Java y Kotlin , mientras que IOS usa Swift.",
  "multplatformConclude": "Con flutter tenemos la posibilidad de programar solo una vez, solo un código y tendrás la opción de generar versiones para ambos sistemas operativos. \nEso es ser multiplataforma.",
  "learMore": "Quizás te estés preguntando, ¿cómo puedo obtener más información?",
  "channelYoutube": "Hay muchos canales de YouTube que te ayudarán mucho cuando recién estés comenzando",
  "myApps": "Mis aplicaciones de enseñanza",
  "callMe": "Llámame en linkedIn para hablar sobre tecnología",
  "officialChannels": "Sitios oficiales de Flutter y Dart",
  "rateMe": "Califica la aplicación",
  "like": "¿Qué te pareció la aplicación?",
  "widgetsLayoutTitle": "Widgets de diseño",
  "widgetsInterfacetTitle": "Aparatos de interfaz",
  "widgetsIntroduction": "Los componentes de la pantalla de Flutter están hechos en base a un conjunto de widgets. \nUn widget es un componente visual en la interfaz del dispositivo",
  "widgetsCategoryTitle": "Los widgets se dividen en dos categorías",
  "widgetsLayout": "Diseño",
  "widgetsInterface": "Interfaz",
  "widgetsLayoutDescription": "Los widgets de diseño son los widgets que diseñan la pantalla. Y obtienen los widgets de la interfaz",
  "widgetsInterfaceDescription": "Los widgets de interfaz son los widgets que se mostrarán en la interfaz de usuario.",
  "widgetsDescription": "Ahora sabemos cómo funcionan los widgets y algunos de los ejemplos más comunes.\n\nHay varios otros widgets que se pueden usar y cada uno tiene sus peculiaridades. La recomendación es buscar siempre aprender más y de fuentes confiables. fuentes." ,
  "widgetsScaffoldDescription": "Scaffold es una clase flutter que proporciona muchos widgets de interfaz como Drawer, BottonNavigationBar, FloatingActionButton, AppBar, Body y otros. \nScaffold se expandirá y ocupará toda la pantalla del dispositivo, ocupando todo el espacio disponible. ",
  "widgetsScaffoldDescriptionTwo": "En el código que se muestra arriba, solo tenemos la declaración de algunas propiedades de Scaffold, pero no tenemos los widgets de la interfaz que se mostrarán. \nPara que se muestren los componentes de la interfaz (appBar, cajón, cuerpo), necesitamos declarar cada widget.\n\nPara crear una pantalla similar a esta, el código sería este:",
  "widgetScaffoldReceived": "Entonces nuestro Scaffold recibirá algunos widgets de interfaz, los cuales se mostrarán, cada uno en su lugar.",
  "widgetContainerIntro": "Un contenedor es un widget que tiene propiedades de tamaño, redondeo, colores y espaciado. \nBásicamente, un contenedor es una 'caja' para almacenar contenido. \nObtiene otros widgets de la propiedad 'child:'",
  "widgetContentContainer": "texto para mostrar",
  "widgetExample": "En este ejemplo, tenemos un widget con varias propiedades. \nAlto 70, Ancho 70, Color de fondo. Y tenemos el texto que se muestra dentro de este widget.",
  "widgetColumns": "Otros widgets que se usan a menudo para crear diseños son Columns y Rows (columnas y filas). \nEstos widgets en particular se usan para colocar los widgets de la interfaz.",
  "widgetColumnsDescription": "Las columnas apilan los widgets verticalmente, mientras que las Filas se apilan horizontalmente. \n\nTenemos dos propiedades muy importantes para estos widgets que son 'mainAxisAlignment' y 'crossAxisAlignment'.\n\nEstas dos propiedades son responsables de organizar todos los componentes dentro del widget.",
  "fisrt": "primero",
  "second": "segundo",
  "third": "tercero",
  "widgetImagesTitle": "Imágenes",
  "widgetImagesDescription": "Tenemos la opción de mostrar una imagen en la aplicación flutter directamente desde Internet, o guardada dentro de una carpeta local. \nPara mostrar una imagen en la pantalla, usamos este widget 'Imagen()'.",
  "widgetImageUrl": "URL de la imagen",
  "widgetImageLocal": "ruta de la imagen local",
  "widgetImageExample": "Como ejemplo, tomemos una imagen de otra aplicación y mostrémosla aquí en nuestra pantalla.",
  "widgetTextTitle": "Textos",
  "widgetTextDescription": "Para mostrar un texto en la pantalla, podemos usar este widget 'Text()'.",
  "widgetTest": "Probar un Texto",
  "widgetIconsTitle": "Iconos",
  "widgetIconsDescription": "Flutter tiene varios íconos que podemos usar para crear nuestros diseños. \nPara eso podemos usar el widget Icon()",
  "widgetButtonsTitle": "Botones",
  "widgetButtonsDescription": "Tenemos varios widgets que pueden hacer la función de 'captura táctil', es decir, botones.\nUn ejemplo es TextButton().",
  "widgetButtonSend": "Enviar"
}