{
  "titleApp": "Learn Flutter",
  "titleDart": "Language Dart",
  "syntaxTitle": "Syntax",
  "nameDart": "Dart",
  "nameFlutter": "Flutter",
  "nameWidgets": "Widgets",
  "nameManagementState": "State Management",
  "nameMultiplatform": "Multiplatform",
  "whatFlutter": "What is Flutter?",
  "whatDart": "What is Dart?",
  "whatWidgets": "What are Widgets?",
  "whatState": "What is state manager?",
  "whatMultiplatform": "What is being multiplatform?",
  "learn": "How to learn more?",
  "learnApps": "Learn more with our apps",
  "learnSqlTitle": "Learning SQL",
  "flutterDescription": "Flutter is one of the leading frameworks for developing mobile applications.",
  "flutterDescriptionTwo": "Created by Google, Flutter has developed native apps for Android and iOS from a single code base.",
  "whatsflutterLanguage": "What language does flutter use?",
  "flutterLanguage": "Flutter uses a language also created by Google itself, called Dart.",
  "dartDescript": "is a platform-independent programming language. Open-source, object-oriented language that comprises a variety of useful features for a software developer.",
  "flutterDescript": "is a portable UI toolkit complete with tools and widgets. It provides developers with a platform to build and deploy visually appealing, natively compiled applications for multiple platforms with ease.",
  "whatLearn": "What will I learn in this app?",
  "detail": "A bit more detail...",
  "managementStateDescription": "State management is basically the way we use to notify flutter when it needs to redraw a screen component, and how flutter will do it performatively.\n\nTo do this management, we can use some libraries that will help us in this task.\nIn our example we will use MOBX.",
  "managementStateElements": "We have 3 main elements involved in this management. \nWe have the Reactions, which mainly redraw the information on the screen. \nWe have the Observables, which are the variables observed by flutter. Flutter will look at this Observable and rewrite it on the screen, in case there is a change in the Observable. \nAnd we have the Actions, which are responsible for changing the Observables.",
  "managementStateExample": "In our example, flutter is drawing the balance of the user's account on the screen. \nAt the moment the balance is R$632.00",
  "managementStateExampleTwo": "After flutter drew the screen, the user received a transfer of BRL 50.00. \nThe variable was changed, but flutter did not display the new balance yet.",
  "balance": "balance",
  "functionDescription": "This is the function that will receive the new balance.",
  "receivedDeposit": "receiveDeposit",
  "valueDeposit": "value deposited",
  "valueInput": "Input of the new balance of BRL 50.00",
  "newBalance": "Right now the new balance is R$682.00",
  "managementStateError": "But our screen has not been redrawn. It keeps showing the value of R$632.00. \nSo this is the role of state management.",
  "exampleMobx": "Let's see how it looks with Mobx?",
  "mobxDescription": "So now the balance is an OBSERVABLE value, that is, that can be observed by someone.\n\n\nNow our ACTION is responsible for changing the value of this observable value.",
  "mobxDescriptionTwo": "And now our flutter, which is inside an OBSERVER, is now an observer. It keeps looking at the OBBSERVABLE.\nWhen there is a change, it will redraw the widget and show the new value.",
  "managementStateConclude": "In a nutshell, this is the role of State Management.",
  "introduction": "For the information below, I am assuming that you already know how to work an algorithm and already have knowledge in programming logic.",
  "dartDescription": "Dart is a strongly typed programming language initially created by Google in 2011. Dart's initial mission was to replace JavaScript for scripting web pages.",
  "dartEvolution": "However, with the evolution of the language and over the years, it can now be considered a multiparadigm language, although the language has strong structures typical of object-oriented languages. \nI'll show you some of the syntax darts. ",
  "firstSee": "First, let's see what a simple 'Hello World' would look like in dart.",
  "variables": "Variables",
  "variablesCreate": "You can create a variable without declaring exactly the type of the variable. But the type of the variable is inferior the moment you declare a value for the variable.",
  "variableDynamic": "Then the 'var' type becomes dynamic if a value is not defined for the variable. After defining some value for the variable, it has the lower type. And after that, we cannot change the type of the variable. ",
  "variableCreateType": "And you can also create a variable by declaring the format directly:",
  "rememberingVariable": "Remembering that it is not possible to change the format of the variable.",
  "variablesConst": "Constant Variables",
  "variablesConstCreate": "To declare a constant variable, just use the word 'final' instead of 'var'.",
  "ifAndElseTitle": "If and Else",
  "ifAndElseExample": "For the example below, if the balance is greater than or equal to the Withdrawal amount, it will allow to withdraw. Otherwise, the system will not withdraw.",
  "ifAndElseConditions": "Between the parentheses we have the IF condition, if it meets the conditions the code inside the braces will be executed. If it doesn't meet the conditions, the code inside the ELSE braces will be executed.",
  "forTitle": "For",
  "forExample": "For the FOR loop example, it will count the numbers until it reaches the number 10.",
  "forDescription": "As we know, the for loop consists of executing an action a certain number of times. And inside the parentheses() we have 3 parameters.",
  "forVariableControl": "Variable for control",
  "forConditions": "Condition to execute",
  "forAnd": " and ",
  "forIncrementVariable": "Variable increment",
  "forDescriptionT": ".\nAnd with that we have our ",
  "forCode": "code snippet ",
  "forRepet": "being repeated, as many times as we need.",
  "switchTitle": "Switch",
  "switchDescription": "The Switch command has the function of executing a certain code when it meets a specific condition. \nIt is usually used when we have several possible options.",
  "switchState": "State",
  "switchMG": "'MG Tax is 18%'",
  "switchAC": "'AC Tax is 17%'",
  "switchAL": "'AL Tax is 12%'",
  "switchRJ": "'RJ Tax is 18%'",
  "switchSC": "'SC Tax is 17%'",
  "switchDefault": "'Sale unavailable for your state.",
  "switchExample": "For example in this example above, the Switch is testing which STATE is being informed. \n'If it is one of the examples, it will print the exact rate. \nBut if the state is unknown, it will enter the DEFAULT option and will display the message that the sale is unavailable.",
  "reading": "Continue reading...",
  "multplatformIntroduction": "Flutter has a great advantage over other technologies, which is that it is cross-platform. A flutter developer can program for Android, IOS, web and even desktop.",
  "multplatformDescription": "When compared to other frameworks, flutter has a great advantage. \nThe cost of Flutter is generally lower. \nBecause in some cases it takes an IOS development team and another Android development team. \nAnd in this case from flutter you don't need a specific team for each platform, I checked the costs considerably.",
  "multplatformDescriptionTwo": "We have different platforms, different operating systems and each of these operating systems requires that the development of applications be in a specific language. \nFor example IOS and Android. Both are 'mobile' but Android uses Java language and Kotlin , when IOS uses Swift.",
  "multplatformConclude": "With flutter we have the possibility to program just once, just one code and you will have the option to generate versions for both operating systems. \nThat's being multiplatform.",
  "learMore": "You must be sad, how can I learn more?",
  "channelYoutube": "There are many YouTube channels that will help you a lot when you are just starting out.",
  "myApps": "My Teaching Apps",
  "callMe": "Call me on linkedIn to talk about technology",
  "officialChannels": "Official Flutter and Dart sites",
  "rateMe": "Rate the app",
  "like": "What did you think of the app?",
  "widgetsLayoutTitle": "Layout Widgets",
  "widgetsInterfacetTitle": "Interface Widgets",
  "widgetsIntroduction": "Flutter's screen components are made based on a set of Widgets. \nA widget is a visual component in the device's interface.",
  "widgetsCategoryTitle": "Widgets are divided into two categories",
  "widgetsLayout": "Layout",
  "widgetsInterface": "Interface",
  "widgetsLayoutDescription": "Layout widgets are the widgets that lay out the screen. And they get the interface widgets.",
  "widgetsInterfaceDescription": "Interface widgets are the widgets that will be displayed in the user interface.",
  "widgetsDescription": "Now we know how widgets work and some of the most common examples.\n\nThere are several other widgets that can be used and each one has its peculiarities. The recommendation is to always seek to learn more and from reliable sources." ,
  "widgetsScaffoldDescription": "The Scaffold is a flutter class that provides many interface widgets such as Drawer, BottonNavigationBar, FloatingActionButton, AppBar, Body and others. \nThe Scaffold will expand and occupy the entire device screen, occupying all available space. ",
  "widgetsScaffoldDescriptionTwo": "In the code shown above, we only have the declaration of some Scaffold properties, but we don't have the interface widgets that will be displayed. \nIn order for the interface components to be displayed (appBar, drawer, body), we need to declare each widget.\n\nTo create a screen similar to this one, the code would be this:",
  "widgetScaffoldReceived": "Then our Scaffold will receive some interface widgets, which will be displayed, each one in its place.",
  "widgetContainerIntro": "A container is a widget that has properties for sizing, rounding, colors and spacing. \nBasically a container is a 'box' to store content. \nIt gets other widgets from the 'child:' property." ,
  "widgetContentContainer": "text to display",
  "widgetExample": "In this example we have a widget with several properties. \nHeight 70, Width 70, Background color. And we have the text being displayed inside this widget.",
  "widgetColumns": "Other widgets often used for building layouts are Columns and Rows (columns and rows). \nThese widgets in particular are used to position the interface widgets.",
  "widgetColumnsDescription": "Columns stack widgets vertically, while Rows stack horizontally. \n\nWe have two very important properties for these widgets which are 'mainAxisAlignment' and 'crossAxisAlignment'.\n\nThese two properties are responsible for organizing all the components inside the widget.",
  "fisrt": " first ",
  "second": " second ",
  "third": " third ",
  "widgetImagesTitle": "Images",
  "widgetImagesDescription": "We have the option to display an image in the flutter app directly from the internet, or saved inside a local folder. \nTo display an image on the screen, we use this 'Image()' widget.",
  "widgetImageUrl": "image url",
  "widgetImageLocal": "local image path",
  "widgetImageExample": "As an example, let's take an image from another application and display it here on our screen.",
  "widgetTextTitle": "Texts",
  "widgetTextDescription": "To display a text on the screen, we can use this 'Text()' widget.",
  "widgetTest": "Test a Text",
  "widgetIconsTitle": "Icons",
  "widgetIconsDescription": "Flutter has several icons that we can use to create our layouts. \nFor that we can use the Icon() widget.",
  "widgetButtonsTitle": "Buttons",
  "widgetButtonsDescription": "We have several widgets that can do the 'touch capture' function, that is, buttons.\nAn example is TextButton().",
  "widgetButtonSend": "Send"
}